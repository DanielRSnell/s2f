---
import ImageMod from "@/components/ImageMod.astro";
import DynamicIcon from "@/helpers/DynamicIcon";
import { markdownify } from "@/lib/utils/textConverter";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";

const { content, largeHeading } = Astro.props;

let { title, subtitle, description, list } = (
  (await getEntry(
    "featuresGridSection",
    "features-grid"
  )) as CollectionEntry<"featuresGridSection">
).data;

if (content) {
  ({ title, subtitle, description } = content);
}
---

<section class="section">
  <div class="container">
    <div class="row">
      <div class="mx-auto text-center lg:col-8" data-aos="fade-up-sm">
        {
          subtitle && (
            <p
              class="mb-2 font-medium text-tertiary"
              set:html={markdownify(subtitle)}
            />
          )
        }
        {
          title &&
            (largeHeading ? (
              <h1 class="h2 md:h1 mb-6" set:html={markdownify(title)} />
            ) : (
              <h2 class="mb-6" set:html={markdownify(title)} />
            ))
        }
        {
          description && (
            <p class="text-lg/[inherit]" set:html={markdownify(description)} />
          )
        }
      </div>
      <div class="col-12 pt-20">
        <div class="row g-5">
          {
            list?.map((item, index) =>
              !((index + 1) % 3 === 0) ? (
                <div
                  class="md:col-6"
                  data-aos="fade-up-sm"
                  data-aos-delay={index * 150}>
                  <div
                    class={`${(index + 1) % 3 === 0 ? "rounded-s-3xl" : "rounded-3xl"} flex min-h-full flex-col justify-start bg-light p-8`}>
                    {item.title && (
                      <h3 class="h4 mb-4" set:html={markdownify(item.title)} />
                    )}
                    {item.description && (
                      <p
                        class="mb-auto text-lg/[inherit]"
                        set:html={markdownify(item.description)}
                      />
                    )}
                    {item.button && item.button.enable && (
                      <a class="btn btn-primary mt-10" href={item.button.link}>
                        {item.button.label}
                        <span class="sr-only">Details</span>
                        <span class="icon-wrapper">
                          <span class="icon">
                            <DynamicIcon icon={"FaArrowRight"} />
                          </span>
                          <span class="icon" aria-hidden="true">
                            <DynamicIcon icon={"FaArrowRight"} />
                          </span>
                        </span>
                      </a>
                    )}

                    {item.image && (index + 1) % 3 !== 0 && (
                      <div class="relative mt-10 rounded-3xl custom-shadow-sm overflow-hidden">
                        <ImageMod
                          class="rounded-3xl"
                          src={item.image}
                          alt={`icon related to ${item.title}`}
                        />
                        <div class="absolute inset-0 bg-primary/90 backdrop-blur-sm flex items-center justify-center">
                          <div class="w-20 h-20 bg-white rounded-full flex items-center justify-center">
                            <svg width="32" height="32" viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                              <path d="M2.9918 21C2.44405 21 2 20.5551 2 20.0066V3.9934C2 3.44476 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44495 22 3.9934V20.0066C22 20.5552 21.5447 21 21.0082 21H2.9918ZM20 15V5H4V19L14 9L20 15ZM20 17.8284L14 11.8284L6.82843 19H20V17.8284ZM8 11C6.89543 11 6 10.1046 6 9C6 7.89543 6.89543 7 8 7C9.10457 7 10 7.89543 10 9C10 10.1046 9.10457 11 8 11Z"></path>
                            </svg>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              ) : (
                <div class="col-12" data-aos="fade-up-sm">
                  <div class="rounded-3xl bg-light p-8">
                    <div class="row gx-0 g-5 items-center">
                      <div class="lg:col-4 lg:pe-6">
                        {item.title && (
                          <h3
                            class="h4 mb-4"
                            set:html={markdownify(item.title)}
                          />
                        )}
                        {item.description && (
                          <p
                            class="text-lg/[inherit]"
                            set:html={markdownify(item.description)}
                          />
                        )}
                        {item.button && item.button.enable && (
                          <a
                            class="btn btn-primary mt-10"
                            href={item.button.link}>
                            {item.button.label}
                            <span class="sr-only">Details</span>
                            <span class="icon-wrapper">
                              <span class="icon">
                                <DynamicIcon icon={"FaArrowRight"} />
                              </span>
                              <span class="icon" aria-hidden="true">
                                <DynamicIcon icon={"FaArrowRight"} />
                              </span>
                            </span>
                          </a>
                        )}
                      </div>
                      <div class="lg:col-8 lg:ps-6">
                        <div class="relative rounded-3xl custom-shadow-sm overflow-hidden">
                          <ImageMod
                            class="rounded-3xl"
                            src={item.image}
                            alt={`icon related to ${item.title}`}
                          />
                          <div class="absolute inset-0 bg-primary/90 backdrop-blur-sm flex items-center justify-center">
                            <div class="w-20 h-20 bg-white rounded-full flex items-center justify-center">
                              <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12 2L2 7V10C2 16 6 20.5 12 22C18 20.5 22 16 22 10V7L12 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M9 12L11 14L16 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                              </svg>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )
            )
          }
        </div>
      </div>
    </div>
  </div>
</section>
