import { d as createAstro, c as createComponent, m as maybeRenderHead, e as renderScript, u as unescapeHTML, a as renderTemplate, b as addAttribute, r as renderComponent, F as Fragment } from './astro/server_CtSX6tUJ.mjs';
import 'kleur/colors';
import { g as getEntry, m as markdownify, D as DynamicIcon } from './Base_TJRx_iKA.mjs';

const $$Astro = createAstro("https://street2fleet.com");
const $$PricingSection = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$PricingSection;
  const { largeHeading, content } = Astro2.props;
  let { title, subtitle, description, plans, plans_labels } = (await getEntry(
    "pricingSection",
    "pricing"
  )).data;
  if (content) {
    ({ title, subtitle, description } = content);
  }
  return renderTemplate`${maybeRenderHead()}<section class="section"> <div class="container"> <div class="row"> <div class="mx-auto text-center lg:col-8" data-aos="fade-up-sm"> ${subtitle && renderTemplate`<p class="mb-2 font-medium text-tertiary">${unescapeHTML(markdownify(subtitle))}</p>`} ${title && (largeHeading ? renderTemplate`<h1 class="h2 mb-6">${unescapeHTML(markdownify(title))}</h1>` : renderTemplate`<h2 class="mb-6">${unescapeHTML(markdownify(title))}</h2>`)} ${description && renderTemplate`<p class="text-lg/[inherit]">${unescapeHTML(markdownify(description))}</p>`} </div> <div class="col-12 pt-20"> <div class="row gx-2"> <div class="col-12 pb-10" data-aos="fade-up-sm" data-aos-delay="200"> <div class="flex items-center justify-center gap-x-3"> ${plans_labels.map((plan, index) => renderTemplate`<span${addAttribute(`select-none font-medium ${index === 0 ? "order-0" : "order-3"}`, "class")}>${unescapeHTML(markdownify(plan))}</span>`)} <label class="relative inline-block h-8 w-16 cursor-pointer order-1 rounded-full bg-text-dark/10"> <span class="sr-only">Pricing Switcher</span> <input type="checkbox" id="checkbox" class="pricing-check peer w-full cursor-pointer opacity-0"> <span class="absolute left-0 top-0 cursor-pointer before:absolute before:left-1 before:top-1 before:h-6 before:w-6 before:translate-x-0 before:rounded-full before:bg-tertiary before:transition-all before:delay-75 before:duration-300 peer-checked:before:translate-x-8"></span> </label> </div> </div> ${plans?.map((item, index) => renderTemplate`<div class="md:col-6" data-aos="fade-up-sm"${addAttribute(200 + index * 150, "data-aos-delay")}> <div${addAttribute(`${(index + 1) % 2 === 0 ? "has-dark-bg bg-text-dark text-text-light" : "bg-light"} group mb-12 flex min-h-full flex-col items-start gap-8 rounded-xl px-8 py-12 last:mb-0 md:gap-12 md:rounded-3xl md:px-11`, "class")}> <div class="flex flex-wrap items-center gap-4"> ${item.title && renderTemplate`<h3 class="counter h5 group-[.has-dark-bg]:text-text-light"> <span>${markdownify(item.title)}</span> </h3>`} ${item.badge?.enable && renderTemplate`<span class="rounded-full bg-secondary px-5 py-1.5 font-medium text-text-dark">${unescapeHTML(markdownify(item.badge.label))}</span>`} </div> ${item.description && renderTemplate`<p class="text-lg/[inherit]">${unescapeHTML(markdownify(item.description))}</p>`} <div class="flex flex-col gap-2 sm:flex-row sm:items-center"> ${item.price_monthly && item.price_yearly && renderTemplate`<strong class="h2 group-[.has-dark-bg]:text-text-light"> ${markdownify(item.price_prefix)} <span class="data-count"${addAttribute(item.price_yearly, "data-count-yearly")}${addAttribute(item.price_monthly, "data-count-monthly")}>${unescapeHTML(markdownify(item.price_monthly))}</span> </strong>`} ${item.price_description_monthly && item.price_description_yearly && renderTemplate`${renderComponent($$result, "Fragment", Fragment, {}, { "default": async ($$result2) => renderTemplate` <span class="text-monthly text-lg/[inherit] group-[.has-dark-bg]:text-text-light">${unescapeHTML(markdownify(
    item.price_description_monthly
  ))}</span> <span class="text-yearly hidden text-lg/[inherit] group-[.has-dark-bg]:text-text-light">${unescapeHTML(markdownify(
    item.price_description_yearly
  ))}</span> ` })}`} </div> ${item.features && renderTemplate`<ul class="list list-tertiary"> ${item.features.map((feature) => renderTemplate`<li class="mb-2 text-lg/[inherit]">${unescapeHTML(markdownify(feature))}</li>`)} </ul>`} ${item.button && item.button.enable && renderTemplate`<a${addAttribute(`${(index + 1) % 2 === 0 ? "btn-light hover:bg-slate-600" : "btn-dark"} btn`, "class")}${addAttribute(item.button.link, "href")}> ${item.button.label} <span class="icon-wrapper"> <span class="icon"> ${renderComponent($$result, "DynamicIcon", DynamicIcon, { "icon": "FaArrowRight" })} </span> <span class="icon" aria-hidden="true"> ${renderComponent($$result, "DynamicIcon", DynamicIcon, { "icon": "FaArrowRight" })} </span> </span> </a>`} </div> </div>`)} </div> </div> </div> </div> </section> ${renderScript($$result, "/Users/broke/umbral/percision/themes/street2fleet/src/layouts/partials/PricingSection.astro?astro&type=script&index=0&lang.ts")}`;
}, "/Users/broke/umbral/percision/themes/street2fleet/src/layouts/partials/PricingSection.astro", void 0);

export { $$PricingSection as $ };
